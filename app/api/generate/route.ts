import { createGoogleGenerativeAI } from "@ai-sdk/google";
import { generateText } from "ai";
import { NextResponse } from "next/server";

const google = createGoogleGenerativeAI({
  apiKey: process.env.GEMINI_API_KEY,
});

/**
 * Formats and cleans the code generated by AI models
 * Removes markdown code blocks and any other formatting artifacts
 */
function formatGeneratedCode(rawCode: string): string {
  try {
    // Remove markdown code blocks if present
    let formattedCode = rawCode
      .replace(/```(python|)\n/g, "")
      .replace(/```$/g, "");

    // Remove any leading/trailing whitespace
    formattedCode = formattedCode.trim();

    // Ensure the code starts with proper imports if they're missing
    if (
      !formattedCode.startsWith("from manim import") &&
      !formattedCode.startsWith("import")
    ) {
      formattedCode =
        "from manim import *\nimport numpy as np\n\n" + formattedCode;
    }

    // Make sure we have a proper class structure
    if (
      !formattedCode.includes("class") &&
      !formattedCode.includes("def construct")
    ) {
      formattedCode = `from manim import *
import numpy as np

class MathAnimation(Scene):
    def construct(self):
        ${formattedCode}`;
    }

    return formattedCode;
  } catch (error) {
    console.error("üîß Error formatting code:", error);
    return rawCode;
  }
}

export async function POST(req: Request) {
  try {
    console.log("üé® Starting code generation");
    const { prompt } = await req.json();
    console.log(`üìã Processing prompt: "${prompt.substring(0, 50)}..."`);

    try {
      const { text: rawCode } = await generateText({
        model: google("gemini-2.0-flash-001"),
        prompt: `${prompt}`,
        system: `You are an expert Manim developer specializing in creating mathematical animations with beautiful visual effects. Your task is to transform the provided prompt into complete, executable manim code that creates a cohesive animation lasting at least 20 seconds.

Your code must be:
1. Fully functional with proper imports and class structure
2. Visually appealing with thoughtful color schemes and aesthetics
3. Well-organized with proper object placement and alignment to avoid overlaps
4. Appropriately paced with smooth transitions and proper timing (ensure total animation time is AT LEAST 20 seconds)
5. Detailed with comments explaining key animation techniques

Guidelines for high-quality, longer animations:
- Add sufficient wait times between animations to ensure a descriptive video
- Use color gradients, glows, and highlights to emphasize important elements
- Apply proper spacing and alignment between mathematical objects
- Implement smooth entry and exit animations (FadeIn/Out, Transform, Create)
- Use camera techniques (zooming, panning) when appropriate for focus
- Add visual aids like arrows, brackets, or background shading to guide attention
- Balance visual complexity - make it beautiful but clear and understandable
- Create multiple scenes or segments that flow together logically
- Include detailed explanations with text elements where appropriate

IMPORTANT: Return ONLY the Python code as plain text. DO NOT wrap it in markdown code blocks or add any additional formatting tags like \`\`\`python or \`\`\`. Just provide clean, executable Python code that starts with imports and ends with the final line of the class.`,
      });

      console.log("üìù Generated raw code successfully");

      const formattedCode = formatGeneratedCode(rawCode);
      console.log("‚úÖ Formatted code successfully");

      try {
        console.log("üöÄ Sending code to backend for animation generation");
        const res = await fetch(
          "https://manim-backend-production.up.railway.app/generate",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              code: formattedCode,
            }),
          }
        );

        if (!res.ok) {
          throw new Error(
            `Backend responded with status: ${res.status} ${res.statusText}`
          );
        }

        const data = await res.json();
        console.log("üéâ Animation generated successfully");
        return NextResponse.json(data);
      } catch (backendError) {
        console.error("‚ùå Backend error:", backendError);
        return NextResponse.json(
          { error: "Failed to generate animation on backend" },
          { status: 502 }
        );
      }
    } catch (aiError) {
      console.error("‚ùå AI code generation error:", aiError);
      return NextResponse.json(
        { error: "Failed to generate code with AI" },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("üí• Fatal error in generate route:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}
